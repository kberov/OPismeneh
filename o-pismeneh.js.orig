/**
 * Disable most events to prevent grabbing pieces of the document.
 */
//<![CDATA[
var show_msg = '1';
if (show_msg !== '0') {
	var options = {view_src: "View Source is disabled!", inspect_elem: "Inspect Element is disabled!", right_click: "Right click is disabled!", copy_cut_paste_content: "Cut/Copy/Paste is disabled!", image_drop: "Image Drag-n-Drop is disabled!" }
} else {
	var options = '';
}

function nocontextmenu(e) { return false; }
document.oncontextmenu = nocontextmenu;
document.ondragstart = function() { return false;}

document.onmousedown = function (event) {
	event = (event || window.event);
	if (event.keyCode === 123) {
		if (show_msg !== '0') {show_toast('inspect_elem');}
		return false;
	}
}
document.onkeydown = function (event) {
	event = (event || window.event);
	//alert(event.keyCode);   return false;
	if (event.keyCode === 123 ||
			event.ctrlKey && event.shiftKey && event.keyCode === 73 ||
			event.ctrlKey && event.shiftKey && event.keyCode === 75) {
		if (show_msg !== '0') {show_toast('inspect_elem');}
		return false;
	}
	if (event.ctrlKey && event.keyCode === 85) {
		if (show_msg !== '0') {show_toast('view_src');}
		return false;
	}
}
function addMultiEventListener(element, eventNames, listener) {
	var events = eventNames.split(' ');
	for (var i = 0, iLen = events.length; i < iLen; i++) {
		element.addEventListener(events[i], function (e) {
			e.preventDefault();
			if (show_msg !== '0') {
				show_toast(listener);
			}
		});
	}
}
addMultiEventListener(document, 'contextmenu', 'right_click');
addMultiEventListener(document, 'cut copy paste print', 'copy_cut_paste_content');
addMultiEventListener(document, 'drag drop', 'image_drop');
function show_toast(text) {
	var x = document.getElementById("amm_drcfw_toast_msg");
	x.innerHTML = eval('options.' + text);
	x.className = "show";
	setTimeout(function () {
		x.className = x.className.replace("show", "")
	}, 3000);
}
//]]>
//Add functionality to buttons and links to navigate withing the document, hide
//and show columns, etc.
$(function($){
    /**
     * Toggles expanded and collapsed state of a paragraph or h3 in a column in
     * the table.
     */
    $('#xapli .exlapse').click(function(e) {
        // get all elements with this button's last class
        let classes = $(e.target).attr('class').split(/\s+/)
        // get the last class which is the same for all the cells in the
        // collumn and does not change ever.
        let clss = classes[classes.length-1]

        $(`td.${clss},th.${clss}`).each(function() {
            if($(this).hasClass('expand')) {
                $('p,h3', this).removeClass('expand').addClass('collapse')
                $(this).removeClass('expand').addClass('collapse')
            }
            else {
                $('p,h3', this).removeClass('collapse').addClass('expand')
                $(this).removeClass('collapse').addClass('expand')
            }
        })
    });

    /**
     * Moves a column to the left.
     */
    $('#xapli .to-left').click(function(e) {
        // get all elements with this button's last class
        let classes = $(e.target).attr('class').split(/\s+/)
        let clss = classes[classes.length-1]

        $(`td.${clss},th.${clss}`).each(function() {
            // get the first from right to left visible sibling before this element
            let left = $(this).prevAll(':visible').get(0)
            $(this).insertBefore(left)
        })
    });

    /**
     * Moves a column to the right.
     */
    $('#xapli .to-right').click(function(e) {
        // get all elements with this button's last class
        let classes = $(e.target).attr('class').split(/\s+/)
        let clss = classes[classes.length-1]

        $(`td.${clss},th.${clss}`).each(function() {
            // get the first visible sibling after this element
            let right = $(this).nextAll(':visible').get(0)
            $(this).insertAfter(right)
        })
    });

    /**
     * Switches font according to the selected class.
     */
    $('#xapli select').change(function() {
        let clss = $(this).attr('class')
        let newClass = $(this).val()
        $(`td.${clss},th.${clss}`).each(function() {
            $(this).removeClass('normal cu').addClass(newClass)
        })
    });

    /**
     *  Change initially selected font depending on the language.
     */
    $('#xapli select[lang="cu"]').val('cu').trigger('change')
    $('#xapli select[lang!="cu"]').val('normal').trigger('change')

    /**
     * Hide all columns which buttons are not primary. Make it visible for the
     * user. Then attach the toggling functionality to all buttons.
     */
    $('#column_buttons button').each(function() {
        let button = $(this);
        let clss = button.attr('for')
        //alert($(this).attr('class'))
        if(!button.attr('class').match(/primary/)) {
            $(`th.${clss},td.${clss}`).toggle('slow')
        }

        button.click(function() {
            if(button.attr('class').match(/primary/)) {
                button.removeClass('primary')
            }
            else {
                button.addClass('primary')
            }
            $(`th.${clss},td.${clss}`).toggle('slow')
        })
    })

    /**
     * Fix scrolling between endnotes and targets.
     */
    $('a[href^="\#"]').click(function(e) {
        e.preventDefault()
        let id = $($(this).attr("href"))
        let top = id.offset().top
        let header_height = $('header').outerHeight() + 16

        let scroll = 300, fade = 300, delay = 500

        $('html,body').animate({scrollTop: top - header_height }, scroll)
        if(id.attr('id').match(/^n_/)) {
            id.parent().delay(delay).fadeOut(fade).fadeIn(fade)
            id.delay(delay + fade).fadeOut(fade).fadeIn(fade)
        }
        else {
            id.parent().parent().delay(delay).fadeOut(fade).fadeIn(fade)
            id.delay(delay + fade).fadeOut(fade).fadeIn(fade)
        }
    });
});
